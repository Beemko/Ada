with Ada.Text_IO;
use Ada.Text_IO; 
with Ada.Calendar;
use Ada.Calendar;
with Barier;
use Barier;

procedure TaskSynchronization is
   b: tBarier;
   MyFile : Ada.Text_IO.File_type;
   
   type TTime is array (1..4, 1 .. 100) of Duration;
   InTime, OutTime : TTime;
   
   task type tTask is
      entry Start(id: in integer; d: in float);
   end tTask;

   task body tTask is
      m_id: integer := -1;
      m_delay: float := 0.0;
   begin
      accept Start(id: in integer; d: in float) do
         m_id := id;
         m_delay := d;
      end;
      
      for i in integer range 1 .. 100 loop
         InTime(m_id, i) := Seconds(Clock);
         --delay Duration(m_delay);
         b.Arrive;
         OutTime(m_id, i) := Seconds(Clock);
      end loop;
      
      Open(File => MyFile, Mode => Append_File, Name => "Log.txt");
   for j in integer range 1 .. 4 loop
      Put(File => MyFile, Item => "Task");
      Put(File => MyFile, Item => Integer'Image(j));
      New_Line(File => MyFile);
      for i in integer range 1 .. 100 loop
         Put(File => MyFile, Item => "In: ");
         Put( File => MyFile, Item => Duration'Image(InTime(j, i)) );
         Put(File => MyFile, Item => " Out: ");
         Put( File => MyFile, Item => Duration'Image(OutTime(j, i)) );
         Put(File => MyFile, Item => ";    ");
      end loop;
      New_Line(File => MyFile);
      New_Line(File => MyFile);
   end loop;
   Close(MyFile); 

      
      --accept TaskEnd;
   end tTask;

   t1, t2, t3, t4: tTask;
begin
   Create(File => MyFile, Mode => Out_File, Name => "Log.txt");
   Close(MyFile);
   
   Start(4);
   t1.Start(1, 0.08);
   t2.Start(2, 0.04);
   t3.Start(3, 0.017);
   t4.Start(4, 0.03);
   
   --t1.TaskEnd;
   --t2.TaskEnd;
   --t3.TaskEnd;
   --t4.TaskEnd;
   
   --Open(File => MyFile, Mode => Append_File, Name => "Log.txt");
   --for j in integer range 1 .. 4 loop
   --   Put(File => MyFile, Item => "Task");
   --   Put(File => MyFile, Item => Integer'Image(j));
   --   New_Line(File => MyFile);
   --   for i in integer range 1 .. 100 loop
   --      Put(File => MyFile, Item => "In: ");
   --      Put( File => MyFile, Item => Duration'Image(InTime(j, i)) );
   --      Put(File => MyFile, Item => " Out: ");
   --      Put( File => MyFile, Item => Duration'Image(InTime(j, i)) );
   --      Put(File => MyFile, Item => ";    ");
   --   end loop;
   --   New_Line(File => MyFile);
   --   New_Line(File => MyFile);
   --end loop;
   --Close(MyFile); 
end TaskSynchronization;